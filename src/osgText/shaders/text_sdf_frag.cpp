char text_sdf_frag[] = "$OSG_GLSL_VERSION\n"
                       "\n"
                       "#pragma import_defines( BACKDROP_COLOR, OUTLINE, SIGNED_DISTNACE_FIELD )\n"
                       "\n"
                       "#if !defined(GL_ES)\n"
                       "    #if __VERSION__>=400\n"
                       "        #define osg_TextureQueryLOD textureQueryLod\n"
                       "    #else\n"
                       "        #extension GL_ARB_texture_query_lod : enable\n"
                       "        #ifdef GL_ARB_texture_query_lod\n"
                       "            #define osg_TextureQueryLOD textureQueryLOD\n"
                       "        #endif\n"
                       "    #endif\n"
                       "#endif\n"
                       "\n"
                       "$OSG_PRECISION_FLOAT\n"
                       "\n"
                       "//#undef USE_SIGNED_DISTNACE_FIELD\n"
                       "\n"
                       "#if __VERSION__>=130\n"
                       "    #define TEXTURE texture\n"
                       "    #define TEXTURELOD textureLod\n"
                       "    out vec4 osg_FragColor;\n"
                       "#else\n"
                       "    #define TEXTURE texture2D\n"
                       "    #define TEXTURELOD texture2DLod\n"
                       "    #define osg_FragColor gl_FragColor\n"
                       "#endif\n"
                       "\n"
                       "uniform sampler2D glyphTexture;\n"
                       "\n"
                       "$OSG_VARYING_IN vec2 texCoord;\n"
                       "$OSG_VARYING_IN vec4 vertexColor;\n"
                       "\n"
                       "vec4 textureColor()\n"
                       "{\n"
                       "    #ifdef OUTLINE\n"
                       "        // glyph.rgba = (signed_distance, thin_outline, thick_outline, glyph_alpha)\n"
                       "        vec4 glyph = TEXTURE(glyphTexture, texCoord);\n"
                       "\n"
                       "        float outline_alpha = (OUTLINE<=0.1) ? glyph.g : glyph.b;\n"
                       "\n"
                       "        float alpha = glyph.a+outline_alpha;\n"
                       "        if (alpha>1.0) alpha = 1.0;\n"
                       "\n"
                       "        return vec4( vertexColor.rgb*glyph.a + BACKDROP_COLOR.rgb*outline_alpha, alpha);\n"
                       "\n"
                       "    #else\n"
                       "        float alpha = TEXTURE(glyphTexture, texCoord).a;\n"
                       "        if (alpha==0.0) vec4(0.0, 0.0, 0.0, 0.0);\n"
                       "        return vec4(vertexColor.rgb, alpha);\n"
                       "    #endif\n"
                       "}\n"
                       "\n"
                       "#ifdef SIGNED_DISTNACE_FIELD\n"
                       "vec4 distanceFieldColor()\n"
                       "{\n"
                       "    float center_alpha = TEXTURELOD(glyphTexture, texCoord, 0.0).r;\n"
                       "    //float center_alpha = TEXTURE(glyphTexture, texCoord).r;\n"
                       "\n"
                       "    float blend_width = 0.005;\n"
                       "    float distance_scale = 0.25;\n"
                       "    float edge_distance = (center_alpha-0.5)*distance_scale;\n"
                       "\n"
                       "    #ifdef OUTLINE\n"
                       "        float outline_width = OUTLINE*0.5;\n"
                       "        if (edge_distance>blend_width*0.5)\n"
                       "        {\n"
                       "            return vertexColor;\n"
                       "        }\n"
                       "        else if (edge_distance>-blend_width*0.5)\n"
                       "        {\n"
                       "            return mix(vertexColor, BACKDROP_COLOR, (blend_width*0.5-edge_distance)/(blend_width));\n"
                       "        }\n"
                       "        else if (edge_distance>(blend_width-outline_width))\n"
                       "        {\n"
                       "            return BACKDROP_COLOR;\n"
                       "        }\n"
                       "        else if (edge_distance>-outline_width)\n"
                       "        {\n"
                       "            return vec4(BACKDROP_COLOR.rgb, (outline_width+edge_distance)/blend_width);\n"
                       "        }\n"
                       "        else\n"
                       "        {\n"
                       "            return vec4(0.0, 0.0, 0.0, 0.0);\n"
                       "        }\n"
                       "    #else\n"
                       "        if (edge_distance>0.0)\n"
                       "        {\n"
                       "            return vertexColor;\n"
                       "        }\n"
                       "        else if (edge_distance>-blend_width)\n"
                       "        {\n"
                       "            return vec4(vertexColor.rgb, 1.0+edge_distance/blend_width);\n"
                       "        }\n"
                       "        else\n"
                       "        {\n"
                       "            return vec4(0.0, 0.0, 0.0, 0.0);\n"
                       "        }\n"
                       "    #endif\n"
                       "}\n"
                       "#endif\n"
                       "\n"
                       "\n"
                       "void main(void)\n"
                       "{\n"
                       "    float near_fade_away = 2.0;\n"
                       "    float far_fade_away = near_fade_away+5.0;\n"
                       "\n"
                       "#ifdef osg_TextureQueryLOD\n"
                       "    float mml = osg_TextureQueryLOD(glyphTexture, texCoord).x;\n"
                       "    if (mml>far_fade_away) discard;\n"
                       "#else\n"
                       "    float mml = 0.0;\n"
                       "#endif\n"
                       "\n"
                       "\n"
                       "#ifdef SIGNED_DISTNACE_FIELD\n"
                       "\n"
                       "    float near_transition = 0.0;\n"
                       "    float far_transition = near_transition+1.0;\n"
                       "\n"
                       "    vec4 color;\n"
                       "    if (mml<near_transition) color = distanceFieldColor();\n"
                       "    else if (mml>far_transition) color = textureColor();\n"
                       "    else color = mix(distanceFieldColor(), textureColor(), (mml-near_transition)/(far_transition-near_transition));\n"
                       "\n"
                       "#else\n"
                       "\n"
                       "    vec4 color = textureColor();\n"
                       "\n"
                       "#endif\n"
                       "\n"
                       "    if (mml>near_fade_away) color.a *= (far_fade_away-mml)/(far_fade_away-near_fade_away);\n"
                       "\n"
                       "    if (color.a==0.0) discard;\n"
                       "\n"
                       "    osg_FragColor = color;\n"
                       "}\n"
                       "\n";
